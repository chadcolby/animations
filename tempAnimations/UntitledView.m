//
// UntitledView.m
// Generated by Core Animator version 1.0 on 2/20/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "UntitledView.h"

@interface UntitledView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation UntitledView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,100,100)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
//	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 100, 100);
	__scaling__.center = CGPointMake(50.0, 50.0);
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *settings = [UIImageView new];
	settings.bounds = CGRectMake(0, 0, 60.0, 60.0);
    
    UIImage *imgSettings = [UIImage imageNamed:@"settings"];
	settings.image = imgSettings;
	settings.contentMode = UIViewContentModeCenter;
	settings.layer.position = CGPointMake(50.000, 50.000);
	[__scaling__ addSubview:settings];
	viewsByName[@"settings"] = settings;

	self.viewsByName = viewsByName;
    
    UITapGestureRecognizer *tapToAnimate = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(viewWasTapped:)];
    tapToAnimate.numberOfTapsRequired = 1;
    tapToAnimate.numberOfTouchesRequired = 1;
    [settings addGestureRecognizer:tapToAnimate];
    settings.userInteractionEnabled = YES;
}

#pragma mark - Actions

- (void)viewWasTapped:(id)sender {
    
    __weak UntitledView *weakSelf = self;
    
    [self addSpinShrinkAnimationWithCompletion:^(BOOL finished) {
        if (finished) {
            [weakSelf.delegate gearWasTapped];
        }
    }];
}

//#pragma mark - spinEnlarge
//
//- (void)addSpinEnlargeAnimation
//{
//	[self addSpinEnlargeAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
//}
//
//- (void)addSpinEnlargeAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
//{
//	[self addSpinEnlargeAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
//}
//
//- (void)addSpinEnlargeAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
//{
//	[self addSpinEnlargeAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
//}
//
//- (void)addSpinEnlargeAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
//{
//	[self addSpinEnlargeAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
//}
//
//- (void)addSpinEnlargeAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
//{
//	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
//
//	if (completionBlock)
//	{
//		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
//		representativeAnimation.duration = 0.200;
//		representativeAnimation.delegate = self;
//		[self.layer addAnimation:representativeAnimation forKey:@"SpinEnlarge"];
//		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"SpinEnlarge"]];
//	}
//
//	CAKeyframeAnimation *settingsRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
//	settingsRotationAnimation.duration = 0.200;
//	settingsRotationAnimation.values = @[@(0.000), @(3.142)];
//	settingsRotationAnimation.keyTimes = @[@(0.000), @(1.000)];
//	settingsRotationAnimation.timingFunctions = @[linearTiming];
//	settingsRotationAnimation.beginTime = beginTime;
//	settingsRotationAnimation.fillMode = fillMode;
//	settingsRotationAnimation.removedOnCompletion = removedOnCompletion;
//	[[self.viewsByName[@"settings"] layer] addAnimation:settingsRotationAnimation forKey:@"spinEnlarge_Rotation"];
//
//	CAKeyframeAnimation *settingsScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
//	settingsScaleXAnimation.duration = 0.200;
//	settingsScaleXAnimation.values = @[@(1.000), @(1.400)];
//	settingsScaleXAnimation.keyTimes = @[@(0.000), @(1.000)];
//	settingsScaleXAnimation.timingFunctions = @[linearTiming];
//	settingsScaleXAnimation.beginTime = beginTime;
//	settingsScaleXAnimation.fillMode = fillMode;
//	settingsScaleXAnimation.removedOnCompletion = removedOnCompletion;
//	[[self.viewsByName[@"settings"] layer] addAnimation:settingsScaleXAnimation forKey:@"spinEnlarge_ScaleX"];
//
//	CAKeyframeAnimation *settingsScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
//	settingsScaleYAnimation.duration = 0.200;
//	settingsScaleYAnimation.values = @[@(1.000), @(1.400)];
//	settingsScaleYAnimation.keyTimes = @[@(0.000), @(1.000)];
//	settingsScaleYAnimation.timingFunctions = @[linearTiming];
//	settingsScaleYAnimation.beginTime = beginTime;
//	settingsScaleYAnimation.fillMode = fillMode;
//	settingsScaleYAnimation.removedOnCompletion = removedOnCompletion;
//	[[self.viewsByName[@"settings"] layer] addAnimation:settingsScaleYAnimation forKey:@"spinEnlarge_ScaleY"];
//}
//
//- (void)removeSpinEnlargeAnimation
//{
//	[self.layer removeAnimationForKey:@"SpinEnlarge"];
//	[[self.viewsByName[@"settings"] layer] removeAnimationForKey:@"spinEnlarge_Rotation"];
//	[[self.viewsByName[@"settings"] layer] removeAnimationForKey:@"spinEnlarge_ScaleX"];
//	[[self.viewsByName[@"settings"] layer] removeAnimationForKey:@"spinEnlarge_ScaleY"];
//}

#pragma mark - spinShrink

//- (void)addSpinShrinkAnimation
//{
//	[self addSpinShrinkAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
//}
//
- (void)addSpinShrinkAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addSpinShrinkAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}
//
//- (void)addSpinShrinkAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
//{
//	[self addSpinShrinkAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
//}
//
//- (void)addSpinShrinkAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
//{
//	[self addSpinShrinkAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
//}

- (void)addSpinShrinkAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.200;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"SpinShrink"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"SpinShrink"]];
	}

	CAKeyframeAnimation *settingsRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
    settingsRotationAnimation.duration = 0.200;
	settingsRotationAnimation.values = @[@(3.142), @(4.713)];
	settingsRotationAnimation.keyTimes = @[@(0.000), @(1.000)];
	settingsRotationAnimation.timingFunctions = @[linearTiming];
	settingsRotationAnimation.beginTime = beginTime;
	settingsRotationAnimation.fillMode = fillMode;
	settingsRotationAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"settings"] layer] addAnimation:settingsRotationAnimation forKey:@"spinShrink_Rotation"];

	CAKeyframeAnimation *settingsScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	settingsScaleXAnimation.duration = 0.200;
	settingsScaleXAnimation.values = @[@(1.400), @(1.000)];
	settingsScaleXAnimation.keyTimes = @[@(0.000), @(1.000)];
	settingsScaleXAnimation.timingFunctions = @[linearTiming];
	settingsScaleXAnimation.beginTime = beginTime;
	settingsScaleXAnimation.fillMode = fillMode;
	settingsScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"settings"] layer] addAnimation:settingsScaleXAnimation forKey:@"spinShrink_ScaleX"];

	CAKeyframeAnimation *settingsScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	settingsScaleYAnimation.duration = 0.200;
	settingsScaleYAnimation.values = @[@(1.400), @(1.000)];
	settingsScaleYAnimation.keyTimes = @[@(0.000), @(1.000)];
	settingsScaleYAnimation.timingFunctions = @[linearTiming];
	settingsScaleYAnimation.beginTime = beginTime;
	settingsScaleYAnimation.fillMode = fillMode;
	settingsScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"settings"] layer] addAnimation:settingsScaleYAnimation forKey:@"spinShrink_ScaleY"];
}

//- (void)removeSpinShrinkAnimation
//{
//	[self.layer removeAnimationForKey:@"SpinShrink"];
//	[[self.viewsByName[@"settings"] layer] removeAnimationForKey:@"spinShrink_Rotation"];
//	[[self.viewsByName[@"settings"] layer] removeAnimationForKey:@"spinShrink_ScaleX"];
//	[[self.viewsByName[@"settings"] layer] removeAnimationForKey:@"spinShrink_ScaleY"];
//}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

//- (void)removeAllAnimations
//{
//	for (UIView *view in self.viewsByName.allValues)
//	{
//		[view.layer removeAllAnimations];
//	}
//	[self.layer removeAnimationForKey:@"SpinEnlarge"];
//	[self.layer removeAnimationForKey:@"SpinShrink"];
//}

@end